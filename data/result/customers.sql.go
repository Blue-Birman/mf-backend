// Code generated by sqlc. DO NOT EDIT.
// source: customers.sql

package main

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (name, email, password, address, created_at)
    VALUES (
        $1, $2, $3, $4, $5
    )
    RETURNING id, name, email, password, address, created_at, updated_at
`

type CreateCustomerParams struct {
	Name      string
	Email     string
	Password  string
	Address   string
	CreatedAt time.Time
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.CreatedAt,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id=$1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const findCustomers = `-- name: FindCustomers :many
SELECT id, name, email, password, address, created_at, updated_at FROM customers
`

func (q *Queries) FindCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, findCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, email, password, address, created_at, updated_at FROM customers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers SET name=$1, email=$2, password=$3, address=$4, updated_at=$5 WHERE id=$6
`

type UpdateCustomerParams struct {
	Name      string
	Email     string
	Password  string
	Address   string
	UpdatedAt sql.NullTime
	ID        int64
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
